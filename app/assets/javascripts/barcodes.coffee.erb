do ($ = jQuery) ->
  $.fn.barcode = (config) ->
    defaults =
      canvas_width: 640
      canvas_height: 480
    default_messages =
      unavailable: "This browser does not have some features required this page. Please try with another browser. このブラウザでは使えません。別のブラウザで試してください。"
      videoButton: "Capture from camera in browser / ブラウザの中でカメラ画像を取得"
      videoCloseButton: "Close Camera / カメラを閉じる"
      decoding: "Decoding... / 認識中..."
      decodingFailed: "Decoding failed. / 認識できませんでした。"
      finished: "Finished. / 認識処理終了。"
      finishedWithCamera: "Finished. Close camera or click image to decode again. / 認識処理終了。カメラを閉じるか画像をクリックして続けて認識させてください。"
      decoderPath: "<%= asset_path("DecoderWorker.js") %>"
      scanIntro: "Show barcode on camera and click below. / カメラにバーコードをかざして下の画像をクリックしてください"
      videoIntro: "Allow to access camera. / カメラへのアクセスを許可してください"
      videoError: "Unable to get video stream! / カメラへのアクセスができませんでした。"
      fileApiError: "Neither createObjectURL or FileReader are supported"
    options = $.extend(defaults, config)
    options.msg = $.extend(default_messages, options.msg)
    if !window.Worker
      return @.html(options.msg.unavailable)
    @.each (i, e) ->
      barcodeReader(e, options)
    return this

  getUserMedia =
    navigator.getUserMedia ||
    navigator.webkitGetUserMedia ||
    navigator.mozGetUserMedia ||
    navigator.msGetUserMedia

  barcodeReader = (el, options) ->
    $el = $(el)
    msg = options.msg
    fileInput = $('<input type="file" accept="image/*;capture=camera">')
    $el.append(fileInput)
    videoButton = $('<button>' + msg.videoButton + '</button>').hide()
    $el.append(videoButton)
    videoCloseButton = $('<button>' + msg.videoCloseButton + '</button>').hide()
    $el.append(videoCloseButton)
    $el.append($('<br>'))
    $video = $('<video></video>').hide()
    $el.append($video)
    video = $video[0]
    canvas = $('<canvas></canvas>').hide()
    canvas.attr({width: options.canvas_width, height: options.canvas_height})
    $el.append(canvas)
    canvas = canvas[0]
    ctx = canvas.getContext("2d")

    workerCount = 0
    resultArray = []
    receiveMessage = (e) ->
      if e.data.success is "log"
        console?.log(e.data.result)
        return
      workerCount--
      if e.data.success
        $.each e.data.result, (i, r) ->
          if $.inArray(r, resultArray) == -1
            resultArray.push(r)
            $el.trigger("decoding", {result: r, results: resultArray})
        $el.trigger("progress", {message: msg.decoding, results: resultArray})
      else
        if resultArray.length == 0 && workerCount == 0
          $el.trigger("error", {message: msg.decodingFailed})
      if workerCount == 0
        if videoCloseButton.attr("disabled")
          $el.trigger("finished", {message: msg.finished, results: resultArray})
        else
          $el.trigger("finished", {message: msg.finishedWithCamera, results: resultArray})
        $(canvas).hide()
    workers =
      normal: new Worker(msg.decoderPath)
      right:  new Worker(msg.decoderPath)
      left:   new Worker(msg.decoderPath)
      flip:   new Worker(msg.decoderPath)
    $.each workers, (i, e) ->
      e.onmessage = receiveMessage

    startDecodeWorkers = ->
      disableInput()
      $(canvas).show()
      resultArray = []
      $el.trigger("progress", {message: msg.decoding, results: []})
      $.each workers, (i, e) ->
        e.postMessage
          pixels: ctx.getImageData(0, 0, canvas.width, canvas.height).data
          cmd: i
        workerCount++

    img = $("<img>")[0]
    img.onload = ->
      ctx.drawImage(img, 0, 0, canvas.width, canvas.height)
      startDecodeWorkers()
    fileInput.on "change", (event) ->
      $el.one "finished", enableInput
      files = event.target.files
      if !files || files.length == 0
        return
      file = files[0]
      try
        URL = window.URL || window.webkitURL
        imgURL = URL.createObjectURL(file)
        img.src = imgURL
        URL.revokeObjectURL(imgURL)
      catch error
        try
          fileReader = new FileReader()
          fileReader.onload = (event) ->
            img.src = event.target.result
          fileReader.readAsDataURL(file)
        catch error
          $el.trigger("error", {message: msg.fileApiError})

    disableInput = ->
      fileInput.attr("disabled", "disabled")
      videoButton.attr("disabled", "disabled")
    if !getUserMedia
      enableInput = ->
        fileInput.removeAttr("disabled")
    else
      enableInput = ->
        fileInput.removeAttr("disabled")
        videoButton.removeAttr("disabled")
      videoButton.show()
      videoCloseButton.show().attr("disabled", "disabled")

    videoStream = null
    onStream = (stream) ->
      URL = window.URL || window.webkitURL
      videoStream = stream
      if URL
        video.src = URL.createObjectURL(stream)
      else
        video.src = stream
      video.play()
    onError = (error) ->
      $el.trigger("error", {message: msg.videoError})
      disableInput()
    scan = ->
      ctx.drawImage(video, 0, 0, video.clientWidth, video.clientHeight)
      startDecodeWorkers()
      $video.hide()
      $el.one "finished", ->
        if videoStream
          $video.show()
    $video.on("click", scan)
    $video.on "play", ->
      videoCloseButton.removeAttr("disabled")
      $video.show()
      $el.trigger("intro", {message: msg.scanIntro})
    videoButton.on "click", ->
      $el.trigger("intro", {message: msg.videoIntro})
      disableInput()
      if !videoStream
        getUserMedia.call(navigator, {audio:false,video:true,toString:->"video"}, onStream, onError)
      return

    videoCloseButton.on "click", ->
      videoCloseButton.show().attr("disabled", "disabled")
      videoStream?.stop()
      videoStream = null
      $video.hide()
      enableInput()

jQuery ($) ->
  container = $("#container")
  result = $('<output></output><hr>')
  container.append(result)
  result = result[0]
  barcode = $('<div></div>')
  container.append(barcode)
  container.append($('<hr>'))
  inputArea = $('#barcode')
  container.show()

  barcode = barcode.barcode()
  barcode.on "decoding", (e, o) ->
    inputArea.val(o.result.replace(/^[^:]+: /g, ""))
  barcode.on "progress", (e, o) ->
    result.innerHTML = o.message + "<br />" + o.results.join("<br />")
  barcode.on "intro", (e, o) ->
    result.innerHTML = o.message
  barcode.on "error", (e, o) ->
    result.innerHTML = o.message
  barcode.on "finished", (e, o) ->
    result.innerHTML += "<br />" + o.message
